// Code generated by protoc-gen-go. DO NOT EDIT.
// source: mcache.proto

/*
Package mcache is a generated protocol buffer package.

It is generated from these files:
	mcache.proto

It has these top-level messages:
	Datos
	Respuesta
*/
package mcache

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Datos struct {
	Name         string `protobuf:"bytes,2,opt,name=Name,json=name" json:"Name,omitempty"`
	Location     string `protobuf:"bytes,3,opt,name=Location,json=location" json:"Location,omitempty"`
	Age          int32  `protobuf:"varint,4,opt,name=Age,json=age" json:"Age,omitempty"`
	InfectedType string `protobuf:"bytes,5,opt,name=InfectedType,json=infectedType" json:"InfectedType,omitempty"`
	State        string `protobuf:"bytes,6,opt,name=State,json=state" json:"State,omitempty"`
}

func (m *Datos) Reset()                    { *m = Datos{} }
func (m *Datos) String() string            { return proto.CompactTextString(m) }
func (*Datos) ProtoMessage()               {}
func (*Datos) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Datos) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Datos) GetLocation() string {
	if m != nil {
		return m.Location
	}
	return ""
}

func (m *Datos) GetAge() int32 {
	if m != nil {
		return m.Age
	}
	return 0
}

func (m *Datos) GetInfectedType() string {
	if m != nil {
		return m.InfectedType
	}
	return ""
}

func (m *Datos) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

type Respuesta struct {
	Enviado bool   `protobuf:"varint,1,opt,name=Enviado,json=enviado" json:"Enviado,omitempty"`
	Msg     string `protobuf:"bytes,2,opt,name=msg" json:"msg,omitempty"`
}

func (m *Respuesta) Reset()                    { *m = Respuesta{} }
func (m *Respuesta) String() string            { return proto.CompactTextString(m) }
func (*Respuesta) ProtoMessage()               {}
func (*Respuesta) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Respuesta) GetEnviado() bool {
	if m != nil {
		return m.Enviado
	}
	return false
}

func (m *Respuesta) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func init() {
	proto.RegisterType((*Datos)(nil), "mcache.Datos")
	proto.RegisterType((*Respuesta)(nil), "mcache.Respuesta")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Cache service

type CacheClient interface {
	ObtenerDatos(ctx context.Context, in *Datos, opts ...grpc.CallOption) (*Respuesta, error)
}

type cacheClient struct {
	cc *grpc.ClientConn
}

func NewCacheClient(cc *grpc.ClientConn) CacheClient {
	return &cacheClient{cc}
}

func (c *cacheClient) ObtenerDatos(ctx context.Context, in *Datos, opts ...grpc.CallOption) (*Respuesta, error) {
	out := new(Respuesta)
	err := grpc.Invoke(ctx, "/mcache.Cache/ObtenerDatos", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Cache service

type CacheServer interface {
	ObtenerDatos(context.Context, *Datos) (*Respuesta, error)
}

func RegisterCacheServer(s *grpc.Server, srv CacheServer) {
	s.RegisterService(&_Cache_serviceDesc, srv)
}

func _Cache_ObtenerDatos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Datos)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheServer).ObtenerDatos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mcache.Cache/ObtenerDatos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheServer).ObtenerDatos(ctx, req.(*Datos))
	}
	return interceptor(ctx, in, info, handler)
}

var _Cache_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mcache.Cache",
	HandlerType: (*CacheServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ObtenerDatos",
			Handler:    _Cache_ObtenerDatos_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mcache.proto",
}

func init() { proto.RegisterFile("mcache.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 228 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x90, 0xb1, 0x4a, 0xc4, 0x40,
	0x10, 0x86, 0x5d, 0x93, 0xcd, 0xe5, 0x86, 0x08, 0x3a, 0x58, 0x2c, 0x57, 0x85, 0x54, 0xa9, 0xae,
	0x38, 0x0b, 0x0b, 0x2b, 0x51, 0x0b, 0x41, 0x14, 0xa2, 0x2f, 0x30, 0x97, 0x1b, 0x63, 0xc0, 0xec,
	0x86, 0xec, 0x28, 0x58, 0xfb, 0xe2, 0xb2, 0x9b, 0x28, 0x76, 0xfb, 0xfd, 0xcb, 0xf0, 0xcf, 0x37,
	0x50, 0x0c, 0x2d, 0xb5, 0x6f, 0xbc, 0x1d, 0x27, 0x27, 0x0e, 0xb3, 0x99, 0xaa, 0x6f, 0x05, 0xfa,
	0x96, 0xc4, 0x79, 0x44, 0x48, 0x1f, 0x69, 0x60, 0x73, 0x5c, 0xaa, 0x7a, 0xdd, 0xa4, 0x96, 0x06,
	0xc6, 0x0d, 0xe4, 0x0f, 0xae, 0x25, 0xe9, 0x9d, 0x35, 0x49, 0xcc, 0xf3, 0xf7, 0x85, 0xf1, 0x14,
	0x92, 0xeb, 0x8e, 0x4d, 0x5a, 0xaa, 0x5a, 0x37, 0x09, 0x75, 0x8c, 0x15, 0x14, 0xf7, 0xf6, 0x95,
	0x5b, 0xe1, 0xc3, 0xcb, 0xd7, 0xc8, 0x46, 0xc7, 0x89, 0xa2, 0xff, 0x97, 0xe1, 0x39, 0xe8, 0x67,
	0x21, 0x61, 0x93, 0xc5, 0x4f, 0xed, 0x03, 0x54, 0x97, 0xb0, 0x6e, 0xd8, 0x8f, 0x1f, 0xec, 0x85,
	0xd0, 0xc0, 0xea, 0xce, 0x7e, 0xf6, 0x74, 0x70, 0x46, 0x95, 0xaa, 0xce, 0x9b, 0x15, 0xcf, 0x18,
	0x2a, 0x07, 0xdf, 0x2d, 0x1b, 0x86, 0xe7, 0xee, 0x0a, 0xf4, 0x4d, 0xf0, 0xc0, 0x1d, 0x14, 0x4f,
	0x7b, 0x61, 0xcb, 0xd3, 0x6c, 0x73, 0xb2, 0x5d, 0x74, 0x23, 0x6e, 0xce, 0x7e, 0xf1, 0xaf, 0xa6,
	0x3a, 0xda, 0x67, 0xf1, 0x14, 0x17, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x65, 0xe3, 0xce, 0x3e,
	0x1a, 0x01, 0x00, 0x00,
}
